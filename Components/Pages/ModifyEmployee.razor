@page "/modify_employee"
@using EmployeeProject.Data
@using MySqlConnector

@inject IEmployeeData EmployeeManager

<!-- EMPLOYEE ID SEARCH -->
<h3>Employee ID</h3>
<div class="card p-3 shadow-sm mb-4">
    <div class="input-group mt-3">
        <input class="form-control" placeholder="Enter Employee ID" @bind="searchValue" />
        <button class="btn btn-outline-primary" @onclick="Search">Search</button>
    </div>
</div>

<!-- MODIFY EMPLOYEE -->
<h3>Modify Employee</h3>
<div class="card shadow-sm p-4 mb-5">
    <div class="row mb-3">
        <div class="col-md-6">
            <label for="firstName" class="form-label fw-bold">First Name</label>
            <input type="text" id="firstName" class="form-control" @bind="firstName" />
        </div>
        <div class="col-md-6">
            <label for="lastName" class="form-label fw-bold">Last Name</label>
            <input type="text" id="lastName" class="form-control" @bind="lastName" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="dob" class="form-label fw-bold">Date of Birth</label>
            <input type="date" id="dob" class="form-control" @bind="dob" />
        </div>
        <div class="col-md-6">
            <label for="jobTitle" class="form-label fw-bold">Job Title</label>
            <input type="text" id="jobTitle" class="form-control" @bind="jobTitle" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="hireDate" class="form-label fw-bold">Date Hired</label>
            <input type="date" id="hireDate" class="form-control" @bind="hireDate" />
        </div>
        <div class="col-md-6">
            <label for="email" class="form-label fw-bold">Email</label>
            <input type="email" id="email" class="form-control" @bind="email" />
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <label for="salary" class="form-label fw-bold">Salary</label>
            <input type="number" id="salary" class="form-control" @bind="salary" />
        </div>
        <div class="col-md-6">
            <label for="deptId" class="form-label fw-bold">Department ID</label>
            <input type="text" id="deptId" class="form-control" @bind="deptId" />
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <button class="btn btn-success btn-lg w-100 shadow-sm" @onclick="Save">
                <i class="bi bi-plus-circle me-2"></i>Save
            </button>
        </div>
    </div>
</div>

<!-- DISPLAY SUCCESS MESSAGE -->
<div class="container">
    @if (!string.IsNullOrEmpty(successfulMessage))
    {
        <div class="alert alert-success" role="alert">
            @successfulMessage
        </div>
    }
</div>

<!-- DISPLAY ERROR MESSAGE -->
<div class="container">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
</div>

@code {
    private string firstName, lastName, jobTitle, email, deptId;
    private decimal salary;
    private DateTime dob = new DateTime(1990, 1, 1);
    private DateTime hireDate = DateTime.Today;

    private string searchValue;             // ID Value input to search 
    private string errorMessage = "";       // Receive error message
    private string successfulMessage = "";  // Receive success message

    private void Search()
    {
        // Get employee from search result
        Employee employee = EmployeeManager.SearchById(searchValue);

        // Assign employee data to input fields
        firstName = employee.FirstName;
        lastName = employee.LastName;
        jobTitle = employee.JobTitle;
        email = employee.Email;
        deptId = employee.DeptID.ToString();
        salary = employee.Salary;
        dob = employee.DoB;
        hireDate = employee.HireDate;
    }

    private void Save()
    {
        // Remove previous message
        successfulMessage = "";

        // Ensure all input fields have a value, email can be null
        if (string.IsNullOrEmpty(firstName) ||
            string.IsNullOrEmpty(lastName) ||
            string.IsNullOrEmpty(jobTitle) ||
            string.IsNullOrEmpty(deptId))
        {
            // Return with error message
            errorMessage = "All fields are required!";
            return;
        }

        // Validate Department ID
        if (int.Parse(deptId) < 1 || int.Parse(deptId) > 5)
        {
            // Return with error message
            errorMessage = "Invalid Department ID!";
            return;
        }

        try
        {
            // Update employee data to Database
            EmployeeManager.UpdateEmployee(searchValue, firstName, lastName, jobTitle, hireDate, dob, email, salary, deptId);
        }
        catch(SuccessfulException ex)
        {
            // Display success message
            // Remove error message
            successfulMessage = ex.Message;
            errorMessage = "";
        }
        catch(MySqlException ex)
        {
            errorMessage = ex.Message;
        }
    }
}
